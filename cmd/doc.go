package cmd

import (
	"fmt"
	"os"
	"path/filepath"
	"regexp"

	"github.com/spf13/cobra"
	"github.com/spf13/cobra/doc"
)

var docCmd = &cobra.Command{
	Use:   "gendoc",
	Short: "Generate Markdown documentation",
	Long:  `Generate Markdown documentation for the CLI and its subcommands.`,
	Run: func(cmd *cobra.Command, args []string) {

		excludedCmds := []string{"gendoc", "completion"}
		for _, c := range rootCmd.Commands() {

			for _, e := range excludedCmds {
				if c.Use == e {
					rootCmd.RemoveCommand(c)
					break
				}
			}
		}

		// First replace any FileNameOpt timestamp defaults
		replaceFileNameOptDefaults(rootCmd)

		err := doc.GenMarkdownTree(rootCmd, "./docs")
		if err != nil {
			fmt.Println("Error generating documentation:", err)
		} else {
			fmt.Println("Documentation generated in ./docs")
		}

		err = removeTimestamp("./docs")
		if err != nil {
			fmt.Println("Error removing timestamp:", err)
		}

	},
}

func init() {
	rootCmd.AddCommand(docCmd)
}

// removeTimestamp removes the timestamp from the auto-generated markdown files
func removeTimestamp(path string) error {
	err := filepath.Walk(path, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}
		if !info.IsDir() && filepath.Ext(path) == ".md" {
			content, err := os.ReadFile(path)
			if err != nil {
				return err
			}

			// Replace the auto-generation line
			re := regexp.MustCompile(`###### Auto generated by spf13/cobra on .*`)
			modifiedContent := re.ReplaceAllString(string(content), "###### Auto generated by spf13/cobra")

			err = os.WriteFile(path, []byte(modifiedContent), 0644)
			if err != nil {
				return err
			}
		}
		return nil
	})

	return err
}

// replaceFileNameOptDefaults recursively processes a command and its subcommands
// to replace dynamic timestamps in FileNameOpt flag defaults with a static value
func replaceFileNameOptDefaults(cmd *cobra.Command) {
	// Check for file flag and replace its default if it contains a timestamp
	if fileFlag := cmd.Flags().Lookup("file"); fileFlag != nil {
		// Look for pattern like "something-1234567890.json"
		re := regexp.MustCompile(`-\d{10}\.json`)
		if re.MatchString(fileFlag.DefValue) {
			// Replace the timestamp with a static value
			fileFlag.DefValue = re.ReplaceAllString(fileFlag.DefValue, "-<timestamp>.json")
		}
	}

	// Recursively process all subcommands
	for _, subCmd := range cmd.Commands() {
		replaceFileNameOptDefaults(subCmd)
	}
}
