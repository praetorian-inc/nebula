package cmd

import (
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"regexp"

	"github.com/spf13/cobra"
	"github.com/spf13/cobra/doc"
)

var docCmd = &cobra.Command{
	Use:   "gendoc",
	Short: "Generate Markdown documentation",
	Long:  `Generate Markdown documentation for the CLI and its subcommands.`,
	Run: func(cmd *cobra.Command, args []string) {
		// Clone the root command to avoid modifying the original
		docRoot := &cobra.Command{
			Use:   rootCmd.Use,
			Short: rootCmd.Short,
			Long:  rootCmd.Long,
		}

		// Add all commands except excluded ones
		excludedCmds := []string{"gendoc", "completion"}
		for _, c := range rootCmd.Commands() {
			excluded := false
			for _, e := range excludedCmds {
				if c.Use == e {
					excluded = true
					break
				}
			}
			if !excluded {
				docRoot.AddCommand(c)
			}
		}

		// First replace any FileNameOpt timestamp defaults
		replaceFileNameOptDefaults(docRoot)

		// Create docs directory if it doesn't exist
		if err := os.MkdirAll("./docs", 0755); err != nil {
			fmt.Printf("Error creating docs directory: %v\n", err)
			return
		}

		// Remove old documentation files using git rm -f
		err := removeOldDocs("./docs")
		if err != nil {
			fmt.Printf("Error removing old documentation: %v\n", err)
			return
		}

		err = doc.GenMarkdownTree(docRoot, "./docs")
		if err != nil {
			fmt.Printf("Error generating documentation: %v\n", err)
		} else {
			fmt.Println("Documentation generated in ./docs")
		}

		err = removeTimestamp("./docs")
		if err != nil {
			fmt.Printf("Error removing timestamp: %v\n", err)
		}
	},
}

func init() {
	rootCmd.AddCommand(docCmd)
}

// removeTimestamp removes the timestamp from the auto-generated markdown files
func removeTimestamp(path string) error {
	err := filepath.Walk(path, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}
		if !info.IsDir() && filepath.Ext(path) == ".md" {
			content, err := os.ReadFile(path)
			if err != nil {
				return err
			}

			// Replace the auto-generation line
			re := regexp.MustCompile(`###### Auto generated by spf13/cobra on .*`)
			modifiedContent := re.ReplaceAllString(string(content), "###### Auto generated by spf13/cobra")

			err = os.WriteFile(path, []byte(modifiedContent), 0644)
			if err != nil {
				return err
			}
		}
		return nil
	})

	return err
}

// removeOldDocs removes existing markdown documentation files using git rm -f
func removeOldDocs(docsPath string) error {
	// Check if docs directory exists and has markdown files
	files, err := filepath.Glob(filepath.Join(docsPath, "*.md"))
	if err != nil {
		return fmt.Errorf("error globbing markdown files: %w", err)
	}

	if len(files) == 0 {
		fmt.Println("No existing documentation files to remove")
		return nil
	}

	fmt.Printf("Found %d existing documentation files to remove\n", len(files))

	// Check if we're in a git repository and git is available
	if _, err := exec.LookPath("git"); err != nil {
		fmt.Println("Git not found, using regular file removal")
		// Fall back to regular file removal
		for _, file := range files {
			if err := os.Remove(file); err != nil {
				fmt.Printf("Error removing %s: %v\n", file, err)
			}
		}
		return nil
	}

	// Try to remove individual files with git rm -f
	for _, file := range files {
		cmd := exec.Command("git", "rm", "-f", file)
		output, err := cmd.CombinedOutput()
		if err != nil {
			// If git rm fails, fall back to regular removal
			fmt.Printf("Git rm failed for %s (may not be tracked), using regular removal: %s\n", file, string(output))
			if err := os.Remove(file); err != nil {
				fmt.Printf("Error removing %s: %v\n", file, err)
			}
		}
	}

	fmt.Printf("Removed %d documentation files\n", len(files))
	return nil
}

// replaceFileNameOptDefaults recursively processes a command and its subcommands
// to replace dynamic timestamps in FileNameOpt flag defaults with a static value
func replaceFileNameOptDefaults(cmd *cobra.Command) {
	// Check for file flag and replace its default if it contains a timestamp
	if fileFlag := cmd.Flags().Lookup("file"); fileFlag != nil {
		// Look for pattern like "something-1234567890.json"
		re := regexp.MustCompile(`-\d{10}\.json`)
		if re.MatchString(fileFlag.DefValue) {
			// Replace the timestamp with a static value
			fileFlag.DefValue = re.ReplaceAllString(fileFlag.DefValue, "-<timestamp>.json")
		}
	}

	// Recursively process all subcommands
	for _, subCmd := range cmd.Commands() {
		replaceFileNameOptDefaults(subCmd)
	}
}
